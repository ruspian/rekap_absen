datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

enum Gender {
  LakiLaki  @map("Laki-laki")
  Perempuan
}

// MODEL SISWA
model Siswa {
  id            String          @id @default(cuid())
  nama          String
  gender        Gender
  tempat_lahir  String
  tanggal_lahir DateTime
  no_hp_ayah    String?     
  no_hp_ibu     String?
  nama_ayah     String?
  nama_ibu      String?
  alamat        String?

  kelasId     String
  kelas       Kelas @relation(fields: [kelasId], references: [id], onDelete: Cascade)  

  pembinaan_wali PembinaanWali[]
  pembinaan_kasus PembinaanKasus[]
  rekap_kehadiran RekapKehadiran[]
  bakatMinat BakatDanMinat[]
}

// MODEL KELAS
model Kelas {
  id          String          @id @default(cuid())
  nama_kelas  String
  jurusan     String
  waliKelasId String
  siswa Siswa[]

  waliKelas WaliKelas @relation(fields: [waliKelasId], references: [id], onDelete: Cascade)
}

// MODEL BAKAT DAN MINAT
model BakatDanMinat {
  id          String          @id @default(cuid())
  bakat       String?
  keterangan       String?

  siswaId     String
  siswa       Siswa @relation(fields: [siswaId], references: [id], onDelete: Cascade)
}

// MODEL PEMBINAAN WALI
model PembinaanWali {
  id          String          @id @default(cuid())
  tanggal     DateTime
  uraian_kejadian String?
  tanggapan_siswa String?
  arahan     String?
  kesepakatan String?
  no_surat String?

  siswaId     String
  siswa       Siswa @relation(fields: [siswaId], references: [id], onDelete: Cascade)

}

// MODEL PEMBINAAN WALI
model PembinaanKasus {
  id          String          @id @default(cuid())
  tanggal     DateTime
  uraian_kejadian String?
  tanggapan_siswa String?
  arahan     String?
  kesepakatan String?
  no_surat String?

  siswaId     String
  siswa       Siswa @relation(fields: [siswaId], references: [id], onDelete: Cascade)

}

// ENUM KONDISI
enum Kondisi {
  Baik
  Buruk
}

// MODEL INVENTARIS
model Inventaris {
  id          String          @id @default(cuid())
  nama        String?
  jumlah_awal Int?
  jumlah_akhir Int?
  kondisi     Kondisi
  keterangan  String?
}

// MODEL MINGGU
model Minggu {
  id          String @id @default(cuid())
  nomorMinggu Int   

  bulanId String
  bulan   Bulan  @relation(fields: [bulanId], references: [id], onDelete: Cascade)
  rekap_kehadiran RekapKehadiran[]
  // Kombinasi bulan dan nomor minggu harus unik
  @@unique([bulanId, nomorMinggu])
}

// MODEL BULAN
model Bulan {
  id         String @id @default(cuid())
  nomorBulan Int    
  namaBulan  String 

  tahunAjaranId String
  tahunAjaran   TahunAjaran @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)

  minggu Minggu[]
  rekap_kehadiran RekapKehadiran[]

  // Kombinasi tahun dan nomor bulan harus unik
  // Ini mencegah ada dua "Juli" di tahun ajaran yang sama
  @@unique([tahunAjaranId, nomorBulan])
}

// MODEL TAHUN AJARAN
model TahunAjaran {
  id    String  @id @default(cuid())
  tahun String  @unique // Contoh: "2024/2025", harus unik
  
  bulan Bulan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// MODEL REKAP KEHADIRAN
model RekapKehadiran {
  id          String          @id @default(cuid())
  sakit       Int?
  izin        Int?
  alfa        Int?
  siswaId     String
  siswa       Siswa @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  mingguId    String
  minggu      Minggu @relation(fields: [mingguId], references: [id], onDelete: Cascade)
  bulanId     String
  bulan       Bulan @relation(fields: [bulanId], references: [id], onDelete: Cascade)

  @@unique([siswaId, mingguId]) // Kombinasi siswaId dan mingguId harus unik
}

// MODEL WALI KELAS
model WaliKelas {
  id          String          @id @default(cuid())
  nama        String
  
  kelas       Kelas[]
}

// MODEL KEPALA SEKOLAH
model KepalaSekolah {
  id          String          @id @default(cuid())
  nama        String
}






